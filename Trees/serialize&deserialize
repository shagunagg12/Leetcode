/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root==null)
        return "";
        StringBuilder res= new StringBuilder();

        Queue<TreeNode> q= new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode node= q.poll();
            if(node==null){
                res.append("# ");
                continue;
            }
           
            res.append(node.val+" ");
            q.add(node.left);
            q.add(node.right);


        }
        return res.toString();
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals(""))
        return null;
        Queue<TreeNode> q= new LinkedList<>();
        String[] values=data.split(" ");
        TreeNode node = new TreeNode(Integer.parseInt(values[0]));
        q.add(node);
        int i=1;
        while(!q.isEmpty() && i<values.length){
            TreeNode parent=q.poll();
            if(!values[i].equals("#")){
                TreeNode left=new TreeNode(Integer.parseInt(values[i]));
                parent.left=left;
                q.add(left);
            }
            i++;
            if(i<values.length && !values[i].equals("#")){
                TreeNode right= new TreeNode(Integer.parseInt(values[i]));
                parent.right=right;
                q.add(right);

            }
            i++;
            
        }
        return node;
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));