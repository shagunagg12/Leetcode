/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)
        return 0;

        Queue<Pair<TreeNode,Integer>> q= new LinkedList<>();
        int maxwidth=0;

        q.offer(new Pair<>(root,0));
        while(!q.isEmpty()){
            int size=q.size();
            int minindex= q.peek().getValue();
            int first=0;
            int last=0;
            for(int i=0;i<size;i++){
                Pair<TreeNode,Integer> p= q.poll();
                TreeNode node= p.getKey();
                int cur= p.getValue()-minindex;
                if(i==0)
                first=cur;
                if(i==size-1)
                last=cur;

                if(node.left!=null)
                q.offer(new Pair<>(node.left,2*cur+1));
                if(node.right!=null)
                q.offer(new Pair<>(node.right,2*cur+2));

                
            }
            maxwidth= Math.max(maxwidth,last-first+1);

        }
        return maxwidth;
    }
}